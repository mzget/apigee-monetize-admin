type APIPackage {
  description: String
  displayName: String
  id: String
  name: String
  status: String
  organization: Organization
  product: [Product]
}

input APIPackageInput {
  description: String!
  displayName: String!
  name: String!
  product: [ProductInput]
  status: String!
}

input ProductInput {
  id: Int!
}

type Product {
  description: String
  displayName: String
  id: String
  name: String
  organization: Organization
  status: String
  transactionSuccessCriteria: String
  refundSuccessCriteria: String
}

type Company {
  apps: [String]
  description: String
  displayName: String
  name: String
  organization: String
  status: String
  attributes: [Attribute]
  createdAt: BigInt
  createdBy: String
  lastModifiedAt: BigInt
  lastModifiedBy: String
}

type Developer {
  apps: [String]
  companies: [Company]
  email: String
  developerId: String
  firstName: String
  lastName: String
  userName: String
  organizationName: String
  status: String
  attributes: [Attribute]
  createdAt: BigInt
  createdBy: String
  lastModifiedAt: String
  lastModifiedBy: String
  id: String
}

type Attribute {
  name: String
  value: String
}

type Organization {
  address: [Address]
  approveTrusted: Boolean
  approveUntrusted: Boolean
  billingCycle: String
  country: String
  currency: String
  description: String
  hasBillingAdjustment: Boolean
  hasBroker: Boolean
  hasSelfBilling: Boolean
  hasSeparateInvoiceForProduct: Boolean
  id: String
  issueNettingStmt: Boolean
  name: String
  nettingStmtPerCurrency: Boolean
  selfBillingAsExchOrg: Boolean
  selfBillingForAllDev: Boolean
  separateInvoiceForFees: Boolean
  status: String
  supportedBillingType: String
  regNo: String
  taxEngineExternalId: String
  taxModel: String
  taxRegNo: String
  timezone: String
}

type Address {
  address1: String
  address2: String
  city: String
  country: String
  id: String
  isPrimary: Boolean
  state: String
  zip: String
}

type RatePlan {
  advance: Boolean
  contractDuration: Int
  contractDurationType: String
  currency: Currency
  customPaymentTerm: Boolean
  description: String
  displayName: String
  earlyTerminationFee: Int
  frequencyDuration: Int
  frequencyDurationType: String
  id: String
  isPrivate: Boolean
  keepOriginalStartDate: Boolean
  monetizationPackage: APIPackage
  name: String
  organization: Organization
  paymentDueDays: String
  prorate: String
  published: Boolean
  ratePlanDetails: [RatePlanDetail]
  recurringFee: Int
  recurringStartUnit: Int
  recurringType: String
  setUpFee: Int
  startDate: String
  type: String
}

type RatePlanDetail {
  aggregateFreemiumCounters: Boolean
  aggregateStandardCounters: Boolean
  aggregateTransactions: Boolean
  currency: Currency
  customPaymentTerm: Boolean
  duration: Int
  durationType: String
  freemiumDuration: Int
  freemiumDurationType: String
  freemiumUnit: Int
  id: String
  meteringType: String
  organization: Organization
  paymentDueDays: String
  ratePlanRates: [RatePlanRates]
  ratingParameter: String
  revenueType: String
  type: String
}

type RatePlanRates {
  endUnit: Int
  id: String
  rate: Float
  revshare: Float
  startUnit: Int
  type: String
}

type Currency {
  id: String
  description: String
  displayName: String
  name: String
  organization: Organization
  status: String
  virtualCurrency: Boolean
}

input RatePlanInput {
  description: String!
  name: String!
  type: AudienceType!
  displayName: String!
  isPrivate: Boolean!
  published: Boolean!
  currency: ObjectInput!
  monetizationPackage: ObjectInput
  organization: ObjectInput!
  ratePlanDetails: [RatePlanDetailInput!]
  startDate: String!
  endDate: String
  earlyTerminationFee: Int
  recurringFee: Int
  setUpFee: Int
  paymentDueDays: Int
  prorate: Boolean
  frequencyDuration: Int
  frequencyDurationType: DurationType
}

input ObjectInput {
  id: String
}

input RatePlanDetailInput {
  currency: ObjectInput!
  ratePlanRates: [RatePlanRatesInput!]
  type: RatePlanType!
  meteringType: MeteringType!
  ratingParameter: String! = "VOLUME"
  ratingParameterUnit: String
  paymentDueDays: Int!
  organization: ObjectInput!
  duration: Int
  durationType: DurationType
  freemiumUnit: Int
  freemiumDuration: Int
  freemiumDurationType: DurationType
}

input RatePlanRatesInput {
  endUnit: Int
  id: String
  rate: Float
  revshare: Float
  startUnit: Int!
  type: String!
}

enum MeteringType {
  UNIT
  VOLUME
  STAIR_STEP
  DEV_SPECIFIC
}

enum RatePlanType {
  REVSHARE
  RATECARD
  REVSHARE_RATECARD
  USAGE_TARGET
}

enum AudienceType {
  STANDARD
  DEVELOPER_CATEGORY
  DEVELOPER
}

enum DurationType {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar BigInt

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Query {
  findOneRatePlan(package_id: String!, plan_id: String!): RatePlan
  ratePlans: [RatePlan]
  activeRatePlansForDev(developer_id: String): [RatePlan]
  developerAcceptedRatePlans(developer_id: String): JSON
  organization: Organization
  companies: [Company]
  company(company_name: String): Company
  companyAcceptedPackage(company_id: String, current: Boolean): [APIPackage]
  companyEligibleProduct(company_id: String): [Product]
  developers: [Developer]
  apiPackages: [APIPackage]
  apiPackage(package_id: String!): APIPackage
}

type Mutation {
  purchaseRatePlan(
    developer_or_company_id: String
    rate_plan_id: String
    start_date: String
  ): JSON
  addProductToPackage(package_id: String, product_id: String): JSON
  deleteProductFormPackage(package_id: String, product_id: String): JSON
  createPackage(packageInput: APIPackageInput): APIPackage
  deletePackage(package_id: String): JSON
  createRatePlan(package_id: String, params: RatePlanInput): JSON
  updateDraftRatePlan(
    package_id: String
    plan_id: String
    params: RatePlanInput
  ): RatePlan
  deleteDraftRatePlan(package_id: String, plan_id: String): JSON
}
